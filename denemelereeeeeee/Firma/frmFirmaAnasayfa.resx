<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="panUst.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>